# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
resX
resX
resY
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX
resY
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
grid
plot(grid)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
new_dims
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
dem_resamp
plot(dem_resamp)
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
debug(prepareDEM)
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
q
Q
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
resX
resY
dims
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
add.y = .2
resX = NULL
resY = NULL
add.x = NULL
add.y = NULL
dsn = NULL
debug(prepareDEM)
devtools::load_all()
debug(prepareDEM)
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test.tif")
undebug(prepareDEM)
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test.tif")
devtools::laod
devtools::load_all()
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
add.y = .2
pre
library(sf)
f = read_sf(bbSource)
plot(f)
s0=st_simplify(f)
plot(s0)
?st_simplify
s0=st_simplify(f, dTolerance = 1000)
plot(s0)
s0=st_simplify(f, dTolerance = 5000)
plot(s0)
s0=st_simplify(f, dTolerance = 50000)
plot(s0)
s0=st_simplify(f, dTolerance = 5)
plot(s0)
?st_simplify
br = read_sf("/media/robink/robinEx/_geodata/_vector/_brasil/brasil_4326.geojson")
plot(br)
br = st_geometry(br)
plot(br)
s = st_simplify(br)
plot(s)
s = st_simplify(br, dTolerance = 1000)
plot(s)
s = st_simplify(br, dTolerance = 1)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 1)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 1000)
plot(s)
s = st_transform(s, 5641)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 1000)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 10000)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 1000000)
plot(s)
s = st_simplify(br, preserveTopology = F, dTolerance = 100000)
plot(s)
st_crs(br)
demSource = "/media/robink/robinEx/_geodata/_raster/_srtm500m/w001001.adf"
s = stars::read_stars(demSource)
plot(s)
bbSource = "/media/robink/robinEx/_geodata/_vector/_austria/austria/at_100km.shp"
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
devtools::load_all()
devtools::load_all()
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
demSource
bbSource
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
st_crs(dem_raw)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
bb = st_bbox(dem_raw)
shape_to_crop = sf::read_sf(bbSource)
st_crs(shape_to_crop)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
!st_crs(dem_raw) == st_crs(shape_to_crop)
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
st_crs(shape_to_crop) == st_crs(dem_raw)
devtools::load_all()
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
dem_raw
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
# 1. resample to desired output resolution
cli::cli_h1("Resampling")
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX
resY
devtools::load_all()
prepareDEM(demSource, bbSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
dem_Raw
dem_raw
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
plot(dem_raw)
plot(dem_raw)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
bb
plot(bb, add=T, col="red")
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
plot(dem_Raw)
plot(dem_raw)
plot(shape_to_crop)
shape_to_crop = sf::read_sf(bbSource)
plot(shape_to_crop %>% st_geometry())
bbSource = "~/projects/qgis/data/vector/austria/shapefile/austria_4326.shp"
s = read_sg(bbSource)
s = read_sf(bbSource)
plot(s)
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
plot(dem_raw)
plot(shape_to_crop)
shape_to_crop
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
plot(dem_raw)
dem_raw
dem_raw = stars::read_stars(demSource)
plot(dem_raw)
class(dem_raw)
st_crs(dem_raw)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
st_crs(shape_to_crop)
st_crs(shape_to_crop) == st_crs(dem_raw)
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
plot(dem_raw)
plot(shape_to_crop)
plot(dem_raw, add=T)
plot(dem_raw)
dem_raw
dem_raw = stars::read_stars(demSource, proxy = F)
dem_raw = stars::read_stars(demSource)
st_crs(shape_to_crop)
shape_to_crop = sf::read_sf(bbSource)
st_crs(shape_to_crop)
plot(shape_to_crop)
plot(dem_raw, add=T)
st_bbox(dem_raw)
bbSource = "/media/robink/robinEx/_geodata/_vector/_brasil/brasil_4326.geojson"
shape_to_crop = sf::read_sf(bbSource)
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
plot(dem_raw)
dem_raw
dem_raw = stars::read_stars(demSource)
s = st_transform(dem_raw, 5641)
plot(s)
r = rast(demSource)
library(terra)
r = rast(demSource)
plot(r)
s = rast(bbSource)
crop(r, shape_to_crop)
r = crop(r, shape_to_crop)
plot(r)
plot(shape_to_crop)
s = stars::st_as_stars(r)
plot(s)
devtools::load_all()
demSource = "~/Desktop/austria.tif"
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
res.x
add.y
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
bbSource = NULL
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
plot(dem_raw)
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
# 1. resample to desired output resolution
if (!is.null(resX) | !is.null(resY)) {
cli::cli_h1("Resampling")
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
} else{
cli::cli_h1("No resampling necessary")
dem_resamp = dem_raw
}
# 2. Rescale the values from 0 -> 65535
cli::cli_h1("Rescaling")
resY
resX
cli::cli_h1("Resampling")
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
bb
bb = st_bbox(dem_raw)
bb
dem_raw = stars::read_stars(demSource)
dem_raw
bb = st_bbox(dem_raw)
resX = NULL
resY = NULL
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
# 1. resample to desired output resolution
if (!is.null(resX) | !is.null(resY)) {
cli::cli_h1("Resampling")
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
} else{
cli::cli_h1("No resampling necessary")
dem_resamp = dem_raw
}
# 2. Rescale the values from 0 -> 65535
cli::cli_h1("Rescaling")
vals = dem_resamp[[1]]
vals_rescaled = scales::rescale(vals, to = c(0, 65535), from = c(min(vals, na.rm = T), max(vals, na.rm = T)))
dem_resamp[[1]] = vals_rescaled
# 3. add "border"
cli::cli_h1("Adding Border")
if (!is.null(add.x) && !is.null(add.y)) {
dem_resamp = make_border(dem_resamp, add.x, add.y)
}
plot(dem_resamp)
dsn
dsn="~/Desktop/tt.tif"
stars::write_stars(dem_resamp, dsn, type = "UInt16", NA_vaue=NA)
stars::write_stars(dem_resamp, dsn, type = "UInt16", NA_vaue=0)
m = dem_resamp[[1]]
m
m[1,1]
dem_resamp = make_border(dem_resamp, add.x, add.y)
m = dem_resamp[[1]]
summary(m)
table(m)
sum(is.na(m))
sum(!is.na(m))
image(m)
stars::write_stars(dem_resamp, dsn, type = "UInt16", NA_value=2)
stars::write_stars(dem_resamp, dsn, type = "UInt16", NA_value=0)
dem_resamp
add.x
add.x = 0.05
add.y = 0.05
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
demSource
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
dsbn
dsn
dsn = "~/Desktop/tt.png"
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.png")
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
?stars::write_stars
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
filename
a = "asdasdas/adasdsad/.csv"
sub("\\.*$", ".png", a)
sub("\\..*$", ".png", a)
a = "asdasdas/adasdsad/asdasd.csv"
sub("\\..*$", ".png", a)
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
cmd = glue::glue("convert {dsn} -transparent black {sub('\\..*$', '.png', dsn)}")
cmd = glue::glue("convert {dsn} -transparent black {sub('\\..*$', '.png', dsn)}")
cmd = glue::glue('convert {dsn} -transparent black {sub("\\..*$", ".png", dsn)}')
cmd = glue::glue('convert {dsn} -transparent black {sub("\\\..*$", ".png", dsn)}')
cmd = glue::glue('convert {dsn} -transparent black {sub("\..*$", ".png", dsn)}')
png = sub("\\..*$", ".png", dsn)
png
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
demSource
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
# Making CRS equal
cli::cli_alert("Making CRSs equal")
if (!st_crs(dem_raw) == st_crs(shape_to_crop)) {
shape_to_crop = st_transform(shape_to_crop, st_crs(dem_raw))
}
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
# 1. resample to desired output resolution
if (!is.null(resX) | !is.null(resY)) {
cli::cli_h1("Resampling")
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
} else{
cli::cli_h1("No resampling necessary")
dem_resamp = dem_raw
}
# 2. Rescale the values from 0 -> 65535
cli::cli_h1("Rescaling")
vals = dem_resamp[[1]]
vals_rescaled = scales::rescale(vals, to = c(0, 65535), from = c(min(vals, na.rm = T), max(vals, na.rm = T)))
dem_resamp[[1]] = vals_rescaled
# 3. add "border"
cli::cli_h1("Adding Border")
if (!is.null(add.x) && !is.null(add.y)) {
dem_resamp = make_border(dem_resamp, add.x, add.y)
}
# 4. write it out as Uint16
cli::cli_h1("Writing it out")
if (is.null(dsn))
stop("Provide an output filename")
filename = basename(dsn)
directory = dirname(dsn)
if (!dir.exists(directory))
if (!dir.exists(directory)){
dir.create(directory, recursive = T)
}
dem_resamp
dsn
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
devtools::load_all()
prepareDEM(demSource, add.x = add.x, add.y= add.y, dsn="~/Desktop/test_au.tif")
