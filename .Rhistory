} else{
grid_vals = rbind(rep(NA, new_cols), grid_vals)
}
}
}
# 3. add "border"
grid_vals = dem_resamp[[1]]
ncol = ncol(grid_vals)
nrow = nrow(grid_vals)
new_cols = floor(ncol * add.x)
new_rows = floor(nrow * add.y)
# now columns
for (i in 1:new_cols) {
if (i %% 2 == 0) {
grid_vals = cbind(grid_vals, rep(NA, nrow))
} else{
grid_vals = cbind(rep(NA, nrow), grid_vals)
}
}
# now rows
new_cols = ncol(grid_vals)
for (j in 1:new_rows) {
if (i %% 2 == 0) {
grid_vals = rbind(grid_vals, rep(NA, new_cols))
} else{
grid_vals = rbind(rep(NA, new_cols), grid_vals)
}
}
image(grid_vals)
# 3. add "border"
grid_vals = dem_resamp[[1]]
ncol = ncol(grid_vals)
nrow = nrow(grid_vals)
new_cols = floor(ncol * add.x)
new_rows = floor(nrow * add.y)
# now columns
for (i in 1:new_cols) {
if (i %% 2 == 0) {
grid_vals = cbind(grid_vals, rep(NA, nrow))
} else{
grid_vals = cbind(rep(NA, nrow), grid_vals)
}
}
# now rows
new_cols = ncol(grid_vals)
for (j in 1:new_rows) {
if (j %% 2 == 0) {
grid_vals = rbind(grid_vals, rep(NA, new_cols))
} else{
grid_vals = rbind(rep(NA, new_cols), grid_vals)
}
}
image(grid_vals)
devtools::load_all()
# 2. Rescale the values from 0 -> 65535
vals = dem_resamp[[1]]
vals_rescaled = scales::rescale(vals, to = c(0, 65535), from = c(min(vals, na.rm = T), max(vals, na.rm = T)))
dem_resamp[[1]] = vals_rescaled
devtools::load_all()
new_vals = get_vals_with_border()
new_vals = get_vals_with_border(dem_resamp, add.x., add.y)
add.x
new_vals = get_vals_with_border(dem_resamp, add.x, add.y)
class(new_vals)
dim(new_vals)
library(ggplot2)
ggplot() + geom_stars(data=dem_resamp)
ggplot() + geom_stars(data=dem_resamp) + coord_equal()
ggplot() + geom_stars(data=dem_resamp)
ggplot() + geom_stars(data=dem_resamp) + coord_fixed(2)
ggplot() + geom_stars(data=dem_resamp) + coord_fixed(.1)
ggplot() + geom_stars(data=dem_resamp)
dem_resamp[[1]] = new_vals
bb
return(list(vals = grid_vals, new_cols = new_cols, new_rows = new_rows))
devtools::load_all()
star = dem_resamp
x = system.file("tif/brazil.tif", package = "hsdblendR")
demSource = x
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
resX = NULL
resY = NULL
add.x = .2
add.y = .2
devtools::load_all()
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
rdd.y = .2
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
bb = sf::read_sf(bbSource) %>% sf::st_bbox()
}
usethis::use_pipe()
devtools::document()
devtools::load_all()
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
bb = sf::read_sf(bbSource) %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = st_crop(dem_raw, bb)
}
dem_raw = sf::st_crop(dem_raw, bb)
devtools::load_all()
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
rdd.y = .2
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
bb = sf::read_sf(bbSource) %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = sf::st_crop(dem_raw, bb)
}
# DIMENSIONS OF THE INPUT RASTER
dims = st_dimensions(dem_raw)
# DIMENSIONS OF THE INPUT RASTER
dims = sf::st_dimensions(dem_raw)
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
dims
class(dims)
bb
plot(dem_raw)
bb
# read original dem
dem_raw = stars::read_stars(demSource)
bbSource
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
print("else")
bb = sf::read_sf(bbSource) %>% sf::st_bbox()
}
bb
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = sf::st_crop(dem_raw, bb)
}
plot(dem_raw)
b = sf::st_read(bbSource)
plot(b)
# read original dem
dem_raw = stars::read_stars(demSource)
plot(dem_raw)
stars::st_crop(dem_raw, b)
sf::st_crop(dem_raw, b)
a = sf::st_crop(dem_raw, b)
plot(a)
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
print("else")
bb = sf::read_sf(bbSource) %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = sf::st_crop(dem_raw, bb)
}
plot(dem_raw)
crop_outline = sf::read_sf(bbSource)
bb = crop_outline %>% sf::st_bbox()
dem_raw = sf::st_crop(dem_raw, crop_outline)
plot(dem_raw)
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX = NULL
resY = NULL
add.x = NULL
add.y = NULL
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX = resY = resY * 2
# setup the grid
grid = st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = st_dimensions(grid)
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
new_dims
sf::st_bbox(new_dims)
# warp the old dem to the new grid
dem_resamp = st_warp(dem_raw, grid)
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
plot(dem_resamp)
sf::st_bbox(dem_resamp)
# 2. Rescale the values from 0 -> 65535
vals = dem_resamp[[1]]
vals_rescaled = scales::rescale(vals, to = c(0, 65535), from = c(min(vals, na.rm = T), max(vals, na.rm = T)))
dem_resamp[[1]] = vals_rescaled
new_vals = get_vals_with_border(dem_resamp, add.x, add.y)
add.x
add.x = add.y = 0.2
new_vals = get_vals_with_border(dem_resamp, add.x, add.y)
new_vals
new_vals[[1]]
dim(new_vals[[1]])
dim(vals_rescaled)
image(new_vals[[1]])
library(terra)
rast = rast(demSource)
plot(rast)
rast_ex = terra:extend(rast, 200)
rast_ex = terra::extend(rast, 200)
plot(rast_ex)
library(stars)
dput(rast)
star=dem_resamp
grid_vals = star[[1]]
ncol = ncol(grid_vals)
nrow = nrow(grid_vals)
new_cols = floor(ncol * add.x)
new_rows = floor(nrow * add.y); if(!new_rows %% 2 == 0) new_rows = new_cols -1
new_cols
new_rows
# now columns
for (i in 1:new_cols) {
if (i %% 2 == 0) {
grid_vals = cbind(grid_vals, rep(NA, nrow))
} else{
grid_vals = cbind(rep(NA, nrow), grid_vals)
}
}
dim(grid_vals)
new_cols
# now rows
new_cols = ncol(grid_vals); if(!new_cols %% 2 == 0) new_cols = new_cols -1
new_cols
cols
# now rows
cols = ncol(grid_vals)
# new columns
for (i in 1:new_cols) {
if (i %% 2 == 0) {
grid_vals = cbind(grid_vals, rep(NA, nrow))
} else{
grid_vals = cbind(rep(NA, nrow), grid_vals)
}
}
grid_vals = star[[1]]
ncol = ncol(grid_vals)
nrow = nrow(grid_vals)
new_cols = floor(ncol * add.x)
new_rows = floor(nrow * add.y); if(!new_rows %% 2 == 0) new_rows = new_cols -1
new_cols
new_rows
new_rows = floor(nrow * add.y)
new_rows
grid_vals = star[[1]]
ncol = ncol(grid_vals)
nrow = nrow(grid_vals)
new_cols = floor(ncol * add.x); if(!new_cols %% 2 == 0) new_cols = new_cols -1
new_rows = floor(nrow * add.y); if(!new_rows %% 2 == 0) new_rows = new_rows -1
new_cols
new_rows
# new columns
for (i in 1:new_cols) {
if (i %% 2 == 0) {
grid_vals = cbind(grid_vals, rep(NA, nrow))
} else{
grid_vals = cbind(rep(NA, nrow), grid_vals)
}
}
cols
for (j in 1:new_rows) {
if (j %% 2 == 0) {
grid_vals = rbind(grid_vals, rep(NA, cols))
} else{
grid_vals = rbind(rep(NA, cols), grid_vals)
}
}
dim(grid_vals)
devtools::load_all()
dem_resamp
star
# use terra
rast = as(star, "SpatRast")
rast(x)
x
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
x = demSource
rast(x)
# use terra
rast = as(star, "SpatRaster")
rast
plot(rast)
#re = terra::extend
?terra::extend
re = terra::extend(rast, 10)
plot(re)
?terra::extend
rast_extended = terra::extend(rast, c( new_rows, new_cols))
plot(rast_extended)
star = as(rast_extended, "star")
star = st_as_star(rast_extended)# as(rast_extended, "star")
star = stars::st_as_star(rast_extended)# as(rast_extended, "star")
star = stars::st_as_stars(rast_extended)# as(rast_extended, "star")
star
plot(star)
plot(st_bbox(star), add=T, col="red")
bb = st_bbob(star) %>% sf::st_as_sfc
bb
bb = st_bbox(star) %>% sf::st_as_sfc
devtools::load_all()
dem_resamp
plot(dem_resamp)
dem_resamp = make_border(dem_resamp, add.x, add.y)
plot(dem_resamp)
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
rdd.y = .2
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
print("else")
crop_outline = sf::read_sf(bbSource)
bb = crop_outline %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = sf::st_crop(dem_raw, crop_outline)
}
# read original dem
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
crop_outline = sf::read_sf(bbSource)
bb = crop_outline %>% sf::st_bbox()
}
dem_raw
plot(dem_raw)
bb
shape_to_crop = sf::read_sf(bbSource)
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
plot(dem_raw)
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
dims
# 1. resample to desired output resolution
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
new_dims
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
plot(dem_resamp)
# 2. Rescale the values from 0 -> 65535
vals = dem_resamp[[1]]
vals_rescaled = scales::rescale(vals, to = c(0, 65535), from = c(min(vals, na.rm = T), max(vals, na.rm = T)))
dem_resamp[[1]] = vals_rescaled
# 3. add "border"
if (!is.null(add.x) && !is.null(add.y)){
dem_resamp = make_border(dem_resamp, add.x, add.y)
}
plot(dem_resamp)
dsn
dsn = NULL
# 4. write it out as Uint16
if(is.null(dsn)) stop("Provide an output filename")
dsn = "~/Desktop/test.png"
dsn
basename(dsn)
filename = basename(dsn)
split_path <- function(x) if (dirname(x)==x) x else c(basename(x),split_path(dirname(x)))
dirname(dsn)
filename = basename(dsn)
directory = dirname(dsn)
filename
directory
devtools::load_all()
getwd()
pwd()
getwd()
getwd()
devtools::load_all()
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
rdd.y = .2
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
add.y
add.y = .2
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
demSource = system.file("tif/brazil.tif", package = "hsdblendR")
bbSource = system.file("/vec/innerBrazil.gpkg", package = "hsdblendR")
add.x = .2
add.y = .2
# read original dem
cli::cli_h1("Reading the dem")
dem_raw = stars::read_stars(demSource)
# if no bounding Source -> use entrire Raster and
# build the bounding box for potential later use
cli::cli_h1("Building the bounding box")
if (is.null(bbSource)) {
bb = st_bbox(dem_raw)
} else{
shape_to_crop = sf::read_sf(bbSource)
bb = shape_to_crop %>% sf::st_bbox()
}
# if bbSource -> crop the DEM
if (!is.null(bbSource)) {
cli::cli_h1("Cropping the Raster")
dem_raw = sf::st_crop(dem_raw, shape_to_crop)
}
# DIMENSIONS OF THE INPUT RASTER
dims = stars::st_dimensions(dem_raw)
# 1. resample to desired output resolution
cli::cli_h1("Resampling")
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
resX = NULL
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
resY = NULL
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
resX
resX
resY
if (is.null(resX) && is.null(resY)) {
resX = abs(dims[["x"]][["delta"]])
resY = abs(dims[["y"]][["delta"]])
}
resX
resY
# setup the grid
grid = stars::st_as_stars(bb, dx = resX, dy = resY)
grid
plot(grid)
# get the new dimensions
new_dims = stars::st_dimensions(grid)
new_dims
# warp the old dem to the new grid
dem_resamp = stars::st_warp(dem_raw, grid)
dem_resamp
plot(dem_resamp)
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
devtools::load_all()
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
debug(prepareDEM)
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
q
Q
prepareDEM(demSource, bbSource, add.x, add.y, dsn="~/Desktop/test.tif")
resX
resY
dims
